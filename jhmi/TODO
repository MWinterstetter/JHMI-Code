TODO's
1. Check if auto reconnect works with the clients
2. Catching Exceptions (Prio for Connect usw. and than reconnecting)
3. Config
4. Parameters
5. Sending Objects (Care if object to big)
6. Rework geting devices (Possibly with MqttHub Home Assistent)
7. Do something with "success or failure" return with client itneraction.
8. jHomey as a Name ok or something more generic?

Generel
	//TODO handle nullpointer Exceptions for accessing HashMaps (and overflow of maps)
	//TODO create abstact manager class
	//TODO Uniform message for clientType
	//TODO Uniform names for variables and methods with same purpose
	//TODO Reduce Parameters
	//TODO Develop method to put messages through logik before sending (manager - logik - client)
	//TODO Write JUnit Tests
	//TODO Improve handling of password and username
	//TODO change ClientInterface to abstract class?
	//TODO Change DeviceRepresentationManager to something better or improve it 
		(generic functions in the manager that call specific in the object with interface?)
	//TODO rename Message Entry
	//TODO Store failure information with relation to message to be accessible
	//TODO Interfaces für getLogdata und device um das auch zu generalisieren.
	//TODO Make encoding felxible
	//TODO retained und qos für gespeicherte Nachrichten und Commands
	//TODO add templates for factory method ConnectionOptions
	//TODO vll mit abstract class umsetzten und dan erben? ConnectionOptions


manager/DeviceRepresentationManager
	//TODO is das OK so oder lieber eine seperate Map für die HomeyDeviceRepresentation
		//Generisches erstellen von DeviceRepresentations anstatt durch dedizierte funktionen
	//TODO what should happend if there is a failure with closing the client?
	
manager/MqttReceiverManager
	//TODO Check uniformity of method names and variable names
	//TODO research Async Client
	//TODO extract authentification to config file
	//TODO Subscribe with callback (Improve method for getting Messages from Subscription)
	//TODO Subscriber that just grabs all messages available, returns them and than quits (Get persistent messages. Is that possible?
	//TODO check accessibility from Python
	//TODO what should happend if there is a failure with closing the client?
	
manager/MqttSenderManager
	//TODO create option for optional parameters (Array for optional parameters?)
	//TODO create config file for different Connect options usw
	//TODO Store failure information with relation to message to be accessible (or return status of message)
	
mqtt_client/ClientInterfaceFactory
	//TODO rename this class
		//Client Factory facade?
	
mqtt_client/PahoMqttClientFactory
	//TODO Handle client creation failure
	//TODO create a password manager and alwasy use get password
		//store the password in the password manager either thorugh file or console input
		//consider the possibility of multiple managers for multiple users maybe?
		//Use Preferences for storage make the preferences static and use plugable functions for handling password (hashing usw.)
		//Villeicht gibts da schon was in Java was icht extenden oder implementen kann
	//TODO kann ich den logger statisch machen und der klasse geben?
	//TODO Client with memory persistance
	//TODO kann ich den logger statisch machen und der klasse geben?
	//TODO change enum and decision making process.
	//TODO Handle potential failure of client creation
	
mqtt_client/PahoMqttConnectOptionsFactory
	//TODO improve the handling of the options(Preferences with Preferences manager?)
	//TODO Java doc for the variables
	//TODO get these values from a config file or Preferences?
	//TODO create a password manager and always use get password
	
mqtt_client/paho/PahoClientContainer
	//TODO do something with getConnectionStatus
	//TODO improve handling or change things in DeviceRepresentation
	//TODO rename into something like pahoClientFacade
	//TODO Handle exception during client Creation
	//TODO create MQTTMessagePersistance implementation to handle multiple messages?
	//TODO Disconnect Client after a certain amount of time or handle connect/disconnect?
	
user_interface/DeviceRepresentation
	//TODO improve handling of callbacks
	//TODO maybe refactor the creation of the client out of the constructor and call it in the through the manager?
	//TODO can i remove the topic variable and set it on a class level on constructing of the object?
	//TODO Allow for the use of additional feature in the Managers (logic between manager and client. Or somewhere else?)
	//TODO change String requirement for value to Object? (Can i send other things than Strings? If yes handle object to big excpetion)
	//TODO check for null on each call of MqttClientFactory.createClient
	//TODO replace/create new client
	//TODO if client is null after returned from factory and if this is possible
	//TODO do i need deviceTopic?
	//TODO maybe do something here for security?
	//TODO Decrease number of parameters as much as possible
	//TODO change the Message Entry to String tripple and add

user_interface/HomeyDeviceRepresentation
	//TODO test if the Command Path extraction works as intended
	//TODO test if accessing the variable from the annonymous inner class works. If not use a function to get the topic.
	
user_interface/IMqttReceiver
	//TODO rename this interface
	//TODO Do i need to return the messageId?
	
util/ClientInterface
	//TODO enable sending things other than messages
	//TODO handle sudden disconnect

util/Config
	//TODO create Config file, create Map for different configurations and create generic way to access configurations
	//Maybe with tags and than get by tag? or something with enums? generating enums based on tags?

util/HomeyLogDataAccess
	//TODO maybe define topic over config file
	//TODO fill the topic variable with the topic
	//TODO handle callback with existing callback and make callback more generic
	//TODO trim the useless information
	//TODO either change the given data to ArrayList or find away to add a String array
	
util/MqttTopicReader
	//TODO get device name reliably from the topic
		// Look into the Home Assistant Discovery part of MQTTHUB devices usw. might be there
		// Create a Homey app which sends the information
	//TODO maybe with topic length? a report for a change of state has to have device/capability/value
	//TODO get capability reliably from the topic
	//TODO get all the device names and capabilities reliably (maybe send request to resend states?)
	//TODO passt des? kann ich das schöner machen?
	//TODO weniger zugriffe auf map und list für bessere performance